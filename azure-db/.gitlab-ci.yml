Lint azure-db:
  stage: "Quality"
  image: hadolint/hadolint:v1.17.6-debian
  script:
    - hadolint ./azure-db/Dockerfile

Build azure-db:
  stage: "Build"
  needs:
    - Lint azure-db
  extends: .base_register_to_gitlab_stage
  variables:
    CONTEXT: azure-db
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/azure-db

Test azure-db 1 3:
  stage: "Test"
  needs:
    - Lint azure-db
    - Build azure-db
  image: "${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA}"
  environment: feature-dev
  script:
    - psql --version
    - az --version
    - jq --version
    #
    - which create-db-user
    - which drop-db-user
    - which backup
    - which export_from_k8s_secret
    #
    - kubectl version
    - kubectl cluster-info

Test azure-db 2 3:
  stage: "Test"
  # NOTE(douglasduteil): retry the whole job
  # In cases when the postgres is not accessible it's safer to retry than waiting
  retry: 2
  services:
    - docker:19-dind
    - postgres:11.5-alpine
  needs:
    - Lint azure-db
    - Build azure-db
  image: docker:19
  variables:
    # for PG service
    POSTGRES_USER: custom_user
    POSTGRES_PASSWORD: custom_pass
    # For azure-db scripts
    NEW_DB_NAME: test_db_${CI_JOB_ID}
    NEW_USER: test_user_${CI_JOB_ID}
    NEW_PASSWORD: test_pass_${CI_JOB_ID}
    DROP_USER: test_user_${CI_JOB_ID}
    DROP_DATABASE: test_db_${CI_JOB_ID}
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA}
    #
    #
    #
    - echo "create db and user on PG service"
    - docker run
        --env NEW_DB_EXTENSIONS="pgcrypto"
        --env NEW_DB_NAME=${NEW_DB_NAME}
        --env NEW_PASSWORD=${NEW_PASSWORD}
        --env NEW_USER=${NEW_USER}
        --env PGHOST=localhost
        --env PGPASSWORD=${POSTGRES_PASSWORD}
        --env PGUSER=${POSTGRES_USER}
        --network="host"
        --rm
      ${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA} create-db-user
    #
    - docker run
        --env PGHOST=localhost
        --env PGPASSWORD=${POSTGRES_PASSWORD}
        --env PGUSER=${POSTGRES_USER}
        --network="host"
        --rm
      postgres:11.5-alpine
        psql -lqtA
    - docker run
        --env PGHOST=localhost
        --env PGPASSWORD=${POSTGRES_PASSWORD}
        --env PGUSER=${POSTGRES_USER}
        --network="host"
        --rm
      postgres:11.5-alpine
        psql ${NEW_DB_NAME} -qtA -c '\du'
    #
    # Test against Hasura
    #
    - docker run
        --detach
        --env HASURA_GRAPHQL_DATABASE_URL=postgres://${NEW_USER}:${NEW_PASSWORD}@localhost:5432/${NEW_DB_NAME}
        --env HASURA_GRAPHQL_ADMIN_SECRET=secret
        --name hasura_test
        --network="host"
        --publish 8080:8080
        --rm
      hasura/graphql-engine:v1.1.0
    - |-
      retry=10;
      while
        ! wget -q --spider "localhost:8080/v1/version" &&
        [[ $(( retry-- )) -gt 0 ]];
      do echo "Waiting for Hasura ($retry)" ; sleep 1 ; done
    #
    - wget -qO- localhost:8080/v1/version
    - docker ps
    - docker logs hasura_test
    #
    - wget -qO- localhost:8080/healthz
    - wget -qO- localhost:8080/healthz | grep "OK"
    #
    - docker stop hasura_test
    #
    # Drop test
    #
    - echo "drop db and user on PG service"
    - docker run
        --env DROP_DATABASE=${NEW_DB_NAME}
        --env DROP_USER=${NEW_USER}
        --env PGHOST=localhost
        --env PGPASSWORD=${POSTGRES_PASSWORD}
        --env PGUSER=${POSTGRES_USER}
        --network="host"
        --rm
      ${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA} drop-db-user
    #
    - docker run
        --env PGHOST=localhost
        --env PGPASSWORD=${POSTGRES_PASSWORD}
        --env PGUSER=${POSTGRES_USER}
        --network="host"
        --rm
      postgres:11.5-alpine
        psql -lqtA
  after_script:
    - docker logs hasura_test || true
    - docker stop hasura_test || true

Test azure-db 3 3:
  stage: "Test"
  needs:
    - Lint azure-db
    - Build azure-db
  image: alpine:3.11
  script:
    # NOTE(douglasduteil): add jq to the alpine container
    # Needed to run the /bin/export_from_k8s_secret tests
    - apk add jq
    #
    - wget https://raw.github.com/tlevine/urchin/v0.0.6/urchin &&
      chmod +x urchin &&
      ./urchin -v
    - ./urchin azure-db/test

Publish azure-db to Github Registry:
  extends: .base_publish_to_github_stage
  needs:
    - Lint azure-db
    - Build azure-db
    - Test azure-db 1 3
    - Test azure-db 2 3
    - Test azure-db 3 3
  variables:
    IMAGE_NAME: socialgouv/docker/azure-db
