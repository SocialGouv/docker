Lint azure-db:
  stage: "Quality"
  image: hadolint/hadolint:v1.17.2-debian
  script:
    - hadolint ./azure-db/Dockerfile

Build azure-db:
  stage: "Build"
  needs:
    - Lint azure-db
  extends: .base_register_to_gitlab_stage
  variables:
    CONTEXT: azure-db
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/azure-db

Test azure-db 1:
  stage: "Test"
  needs:
    - Lint azure-db
    - Build azure-db
  image: "${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA}"
  script:
    - psql --version
    - az --version
    #
    - which create-db-user
    - which drop-db-user
    - which backup

Test azure-db 2:
  stage: "Test"
  services:
    - docker:18-dind
    - postgres:11.5-alpine
  needs:
    - Lint azure-db
    - Build azure-db
  image: docker:18
  variables:
    # for PG service
    POSTGRES_DB: custom_db
    POSTGRES_USER: custom_user
    POSTGRES_PASSWORD: custom_pass
    # For psql
    PGPASSWORD: custom_pass
    PGUSER: custom_user
    # For azure-db scripts
    NEW_DB_NAME: test_db_${CI_JOB_ID}
    NEW_USER: test_user_${CI_JOB_ID}
    NEW_PASSWORD: test_pass_${CI_JOB_ID}
    DROP_USER: test_user_${CI_JOB_ID}
    DROP_DATABASE: test_db_${CI_JOB_ID}
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA}
    # NOTE(douglasduteil): manually create an `azure_pg_admin` role
    # As `azure-db` is made to run on Azure Database for PostgreSQL, the scripts
    # inside assume that an `azure_pg_admin` is present.
    # see https://docs.microsoft.com/en-us/azure/postgresql/howto-create-users
    # Below we fake Azure like postgres instance on the local service
    - docker run
        --env PGHOST=localhost
        --env PGUSER=postgres
        --network="host"
        --rm
        ${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA}
      psql -v ON_ERROR_STOP=1 -c CREATE ROLE azure_pg_admin SUPERUSER;
    #
    - echo "create db and user on PG service"
    - docker run
        --env PGHOST=localhost
        --env PGPASSWORD=${PGPASSWORD}
        --env PGUSER=${PGUSER}
        --env NEW_DB_NAME=${NEW_DB_NAME}
        --env NEW_USER=${NEW_USER}
        --env NEW_PASSWORD=${NEW_PASSWORD}
        --network="host"
        --rm
      ${CI_REGISTRY_IMAGE}/azure-db:${CI_COMMIT_SHA} create-db-user
    - echo "test db and user on PG"
    - psql -c "CREATE TABLE logs (value character varying(255));"
    - psql -c "INSERT INTO logs set value='hello';"
    - psql -c "SELECT * from logs;"
    - echo "destroy db and user on PG service"
    - drop-db-user
    - echo "test db and user on PG"
    - psql -c "CREATE TABLE logs2 (value character varying(255));"

Publish azure-db to Github Registry:
  extends: .base_publish_to_github_stage
  needs:
    - Lint azure-db
    - Build azure-db
    - Test azure-db 1
    - Test azure-db 2
  variables:
    IMAGE_NAME: socialgouv/docker/azure-db
