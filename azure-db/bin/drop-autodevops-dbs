#!/bin/bash
set +x
set -e

#
# delete a database and user on a remote Azure Postgres server
#

PGUSER=${PGUSER:-postgres}
PGPORT=${PGPORT:-5432}
PGHOST=${PGHOST:-127.0.0.1}

# check mandatory environment variables
MANDATORY_VARS="PGPASSWORD"
for VAR in $MANDATORY_VARS; do
  if [[ -z "${!VAR}" ]]; then
    echo "${VAR} environment variable is empty"
    exit 1
  fi
done

# arobase replacement
PG_URL_ADMIN="postgresql://${PGUSER/@/%40}:${PGPASSWORD}@${PGHOST}:${PGPORT}/postgres"

# prevent read-only server when full
psql -abe "$PG_URL_ADMIN" -c "SET SESSION CHARACTERISTICS AS TRANSACTION READ WRITE;"

echo
echo "drop all db_* and autodevops_* on ${PGHOST}"

psql -abe "$PG_URL_ADMIN" < <( psql -abe "$PG_URL_ADMIN" -Atc "
  select '
        SELECT pg_terminate_backend (pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '''||datname||''';
        drop database \"'||datname||'\";
        REVOKE ALL PRIVILEGES ON SCHEMA public FROM \"user_'||SPLIT_PART(datname, '_', 2)||'\";
        REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM \"user_'||SPLIT_PART(datname, '_', 2)||'\";
        REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public FROM \"user_'||SPLIT_PART(datname, '_', 2)||'\";
        REVOKE ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public FROM \"user_'||SPLIT_PART(datname, '_', 2)||'\";
        DROP OWNED BY \"user_'||SPLIT_PART(datname, '_', 2)||'\" CASCADE; DROP USER \"user_'||SPLIT_PART(datname, '_', 2)||'\";'
  from pg_database
  where (datname like 'db_%' or datname like 'autodevops_%');")


