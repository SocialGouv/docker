#!/bin/bash
set +x
set -e

#
# delete a database and user on a remote Azure Postgres server
#

PGUSER=${PGUSER:-postgres}
PGPORT=${PGPORT:-5432}
PGHOST=${PGHOST:-127.0.0.1}

# check mandatory environment variables
MANDATORY_VARS="PGPASSWORD DROP_DATABASE DROP_USER"
for VAR in $MANDATORY_VARS; do
  if [[ -z "${!VAR}" ]]; then
    echo "${VAR} environment variable is empty"
    exit 1
  fi
done

# arobase replacement
PG_URL_ADMIN="postgresql://${PGUSER/@/%40}:${PGPASSWORD}@${PGHOST}:${PGPORT}/postgres"
DROP_USER_BASE=${DROP_USER%%@*} || $DROP_USER

echo
echo "disconnect activities on database ${DROP_DATABASE} on ${PGHOST}"
psql -abe "$PG_URL_ADMIN" -c "
  # Inspired by https://stackoverflow.com/questions/3185266/postgresql-temporarily-disable-connections
  # Temporarily disable connections
  UPDATE pg_database SET datallowconn = false WHERE datname = '${DROP_DATABASE}';

  # Disconnect users from database 
  SELECT pg_terminate_backend(procpid)
  FROM pg_stat_activity
  WHERE datname = '${DROP_DATABASE}' and procpid <> pg_backend_pid();
"

echo
echo "deleting database ${DROP_DATABASE} on ${PGHOST}"
psql -abe "$PG_URL_ADMIN" -c "
  DROP DATABASE $DROP_DATABASE;
"

echo
echo "deleting user ${DROP_USER_BASE} on ${PGHOST}"
psql -abe "$PG_URL_ADMIN" -c "
  REVOKE ALL PRIVILEGES ON SCHEMA public FROM \"${DROP_USER_BASE}\";
  REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM \"${DROP_USER_BASE}\";
  REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public FROM \"${DROP_USER_BASE}\";
  REVOKE ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public FROM \"${DROP_USER_BASE}\";
  DROP OWNED BY ${DROP_USER_BASE} CASCADE;
  DROP USER ${DROP_USER_BASE};
"
